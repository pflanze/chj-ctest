#!/usr/bin/env perl

my $copyright= <<'COPYRIGHT';
# Copyright 2021 by Christian Jaeger <ch@christianjaeger.ch>
# Published under the same terms as perl itself
COPYRIGHT

use strict;
use utf8;
use warnings;
use warnings FATAL => 'uninitialized';
use experimental 'signatures';

use Getopt::Long;
use Chj::xperlfunc qw(xgetfile_utf8 xprint xprintln basename);
use Chj::xIOUtil qw(xputfile_utf8);
use Chj::singlequote qw(singlequote singlequote_many);

my ($email_full)= $copyright=~ / by ([^\n]*)/s;

my ($mydir, $myname);
BEGIN {
    $0=~ /(.*?)([^\/]+)\z/s or die "?";
    ($mydir, $myname)=($1,$2);
}
use lib $mydir;
use FP::Predicates qw(instance_of);
use Chj::CTest qw(path_to_FIL);

sub usage {
    print STDERR map{"$_\n"} @_ if @_;
    print "$myname [-I path] target/foo.o ...

  Parses the .c and .h files it finds via the given .o files, prints
  make syntax of the dependencies.

  It also generates (overwrites) the file run_tests.c if --run-tests
  is given.

  Options:

    --run-tests  Generate run_tests.c
    -I path   Path to search for source files. Can be given multiple times.
              Default if none given: '.'
    --trap    Use FP::Repl::Trap.

  ($email_full)
";
exit (@_ ? 1 : 0);
}

our $verbose=0;
#our $opt_dry;
our $opt_trap;
our @opt_dirs;
our $opt_run_tests;
GetOptions("verbose"=> \$verbose,
	   "help"=> sub{usage},
           "trap"=> \$opt_trap,
           "run-tests"=> \$opt_run_tests,
           "I=s"=> sub {
               my ($k,$v)=@_;
               push @opt_dirs, $v;
           },
	   #"dry-run"=> \$opt_dry,
	   ) or exit 1;
usage unless @ARGV;

if ($opt_trap) {
    require FP::Repl::Trap;
    no warnings;
    *repl = \&FP::Repl::repl;
}

our @dirs = @opt_dirs ? @opt_dirs : ".";

sub subpath_perhaps_find($orig_subpath, $subpath, $maybe_subpath_s, $constr) {
    for my $dir (@dirs) {
        my $pp = "$dir/$subpath";
        return $constr->($pp) if -e $pp;
        return () if (defined $maybe_subpath_s
                      and -e "$dir/$maybe_subpath_s");
    }
    die "could not find $subpath"
        .(defined $maybe_subpath_s ? " / $maybe_subpath_s" : "")
        ." for original path ".singlequote($orig_subpath)
        ." in dirs: "
        .singlequote_many(@dirs);
}

sub o_to_perhaps_c ($path) {
    # returns () for .s files; exception if not found
    my $p = $path;
    $p=~ s/\.o$// or die "invalid object path '$path'";
    $p=~ s{^target/+}{} or die "invalid object path '$path'";
    my $c = "$p.c";
    if ($c eq "run_tests.c") {
        CFile("./$c") # XX shouldn't that be ignored?
    } else {
        subpath_perhaps_find $path, $c, "$p.s", \&CFile
    }
}

sub include_perhaps_find($path, $constr) {
    subpath_perhaps_find $path, $path, undef, $constr
}

sub is_relpath_with_suffix($v) {
    # assume files in local dir are prepended with "./", thus paths
    # always contain a slash
    not ref($v) and $v=~ m{^[^/].*/.*\.\w+\z}s
}

package PFLANZE::File {
    use FP::Struct [[\&main::is_relpath_with_suffix, "relpath"]]
        => qw(FP::Struct::Show);
    _END_
}
PFLANZE::File::constructors->import;
#*is_File = instance_of("PFLANZE::File");

package PFLANZE::CHFile {
    use FP::Struct [] => qw(PFLANZE::File);
    _END_
}
PFLANZE::CHFile::constructors->import;
*is_CHFile = instance_of("PFLANZE::CHFile");

package PFLANZE::CFile {
    use FP::Struct [] => qw(PFLANZE::CHFile);
    _END_
}
PFLANZE::CFile::constructors->import;
#*is_CFile = instance_of("PFLANZE::CFile");

package PFLANZE::HFile {
    use FP::Struct [] => qw(PFLANZE::CHFile);
    _END_
}
PFLANZE::HFile::constructors->import;
#*is_HFile = instance_of("PFLANZE::HFile");

package PFLANZE::SFile {
    use FP::Struct [] => qw(PFLANZE::File);
    _END_
}
PFLANZE::SFile::constructors->import;
#*is_SFile = instance_of("PFLANZE::SFile");

package PFLANZE::Pairing {
    use FP::Struct ["source", "dependency"]
        => qw(FP::Struct::Show);
    _END_
}
PFLANZE::Pairing::constructors->import;
#*is_Pairing = instance_of("PFLANZE::Pairing");

package PFLANZE::Dependency {
    use FP::Struct [[\&main::is_CHFile, "source"],
                    [\&main::is_CHFile, "dependency"]]
        => qw(FP::Struct::Show);
    _END_
}
PFLANZE::Dependency::constructors->import;
#*is_Dependency = instance_of("PFLANZE::Dependency");

sub line_to_perhaps_dep($line) {
    if (my ($path) = /^\s*#\s*include\s*"([^"]+)"/) {
        my $s = suffix($path);
        my $constr= ( $s eq "h" ? \&HFile :
                      $s eq "c" ? \&CFile :
                      die "unknown suffix '$s'");
        if (my ($file) = include_perhaps_find($path, $constr)) {
            $file
        } else {
            die "could not find file: '$path'";
        }
    } else {
        ()
    }
}

sub chfile_dependencies ($chfile) {
    is_CHFile($chfile) or die "type";
    my $path = $chfile->relpath;
    return () if $path eq "./run_tests.c"; # hacky :/
    my @lines = split /\r?\n/, xgetfile_utf8($path);
    map {
        Dependency($chfile, $_)
    }
    map {
        line_to_perhaps_dep $_
    } @lines
}

my @c_files = map {
    o_to_perhaps_c $_
} @ARGV;

my @direct_deps = map { chfile_dependencies($_) } @c_files;

my %depends; # source relpath => dependency relpath => dependency CHFile

for (@direct_deps) {
    $depends{$_->source->relpath}
    ->{$_->dependency->relpath}
    = $_->dependency;
}

sub add_missing {
    my %missing = map {
        my $chfile= $_;
        exists $depends{$chfile->relpath} ? ()
            : ($chfile->relpath => $chfile)
    } map {
        values %$_
    } values %depends;

    my @deps = map {
        chfile_dependencies(include_perhaps_find $_, \&CHFile)
    } keys %missing;

    for (@deps) {
        $depends{$_->source}->{$_->dependency}++;
    }
    scalar @deps
}

do {} while add_missing;

sub printdeps_for($chfile, $seen) {
    my $d = $depends{$chfile} or return;
    # ^ OK, if foo.h has no includes then not here
    for my $chfile (sort keys %$d) {
        next if $seen->{$chfile};
        $seen->{$chfile}= 1;
        xprint " $chfile";
        printdeps_for($chfile, $seen);
    }
}

sub suffix($file) {
    $file=~ s/.*\.// or die "file does not have a suffix: '$file'";
    $file=~ /^\w+\z/ or die "bad suffix: '$file'";
    $file
}

for my $chfile (sort keys %depends) {
    if (suffix($chfile) eq 'c') {
        my $ofile = "target/".basename($chfile);
        $ofile =~ s/\.c\z/.o/ or die "bug";
        xprint "$ofile:";
        # track down ALL dependencies; but only once each
        my $seen= {};
        printdeps_for($chfile, $seen);
        xprintln;
    }
}


sub line_to_perhaps_test($line) {
    if (my ($cfun) = /^\s*TEST\s*\(\s*(\w+)\s*\)\s*\{/) {
        $cfun
    } else {
        ()
    }
}

sub cfile_tests ($path) {
    my @lines = split /\r?\n/, xgetfile_utf8($path);
    map {
        Pairing($path, $_)
    }
    map {
        line_to_perhaps_test $_
    } @lines
}

sub Dependency_to_FIL($dep) {
    path_to_FIL($dep->source)
}    

if ($opt_run_tests) {
    # generate run_tests.c, from all the .c files except itself, with
    # all the given tests. Again does not parse CPP instructions that
    # might exclude them, d'oh, well. Assume all tests are used.
    my @tests = map {
        cfile_tests $_
    }
    grep { /\.c$/ and not $_ eq "run_tests.c" }
    sort keys %depends;

    xputfile_utf8(
        "run_tests.c",
        join "\n",
        "// generated by $0",
        '#include "chj-ctest/test.h"',
        "",
        (
         map {
             my $fnname = $_->dependency;
             my $bn = Dependency_to_FIL($_);
             "void __test_$bn$fnname (struct TestStatistics *);"
         } @tests
        ),
        "",
        "",
        "void run_tests() {",
        "    struct TestStatistics stats = { 0, 0 };",
        (
         map {
             my $fnname = $_->dependency;
             my $file = $_->source;
             my $bn = Dependency_to_FIL($_);
             "    run_test_(\&stats, \"$fnname in \\\"$file\\\"\", __test_$bn$fnname);"
         } @tests
        ),
        "    print_teststatistics(\&stats);",
        "}",
        ""
        );
}

#use FP::Repl; repl;
#use Chj::ruse;
#use Chj::Backtrace; 

